/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'jony' at '1/19/17 7:11 PM' with Gradle 2.13
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.13/userguide/tutorial_java_projects.html
 */
 
 plugins {
 	id 'org.hidetake.ssh' version '2.7.0'
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'application'

mainClassName = "app.SimpleWebServer"

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
    maven{
    	url "https://maven.csse.rose-hulman.edu/artifactory/libs-release"
    }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.+'
    compile 'org.slf4j:slf4j-log4j12:1.7.+'
    
    

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    
    compile(group: 'com.google.http-client', name: 'google-http-client', version:'1.22.0') 
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group "edu.rosehulman.csse477.EAGM"

if (System.getenv("CI_BUILD_TAG") != null) {
    version = "${System.getenv("CI_BUILD_TAG")}"
} else {
    version = '1.0.0-SNAPSHOT'
}

// Code coverage analyzer
jacoco {
	toolVersion = "0.7.+"
}

jacocoTestReport {
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
	}
}

jar {
    manifest {
        attributes "Implementation-Title": "EAGM",
                "Implementation-Version": "${version}"
    }
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "file://${buildDir}/repo")
		}
	}
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}

test {
	jacoco {
		append = false
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
			artifact packageSources
        }
    }
}

publishing {
    repositories {
        maven {
            credentials {
                username System.getenv('MAVEN_USER')
                password System.getenv('MAVEN_PASSWORD')
            }
            url "https://maven.csse.rose-hulman.edu/artifactory/student-release-local"
        }
    }
}


test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
	ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
	doLast {
		println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false);
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
				  
		def reportNode = parser.parse(srcFile)
		reportNode.children().each {
			if(it.name() == 'counter') {
				String type = it.@type
				float missed = it.@missed as float
				float covered = it.@covered as float
				float percentage = covered / (missed + covered) * 100
				println "Code Coverage[$type]: $percentage%"
			}
		}
	}
}
jacocoTestReport.finalizedBy(codeCoverageInfo)

// SSH Publishing
ssh.settings { knownHosts = allowAnyHosts }
remotes {
	stagingServer {
		host = '477-27.csse.rose-hulman.edu'
		user = System.getenv('SSH_STAGING_USER')
		password = System.getenv('SSH_STAGING_PASSWORD')
	}
	deployServer {
		host = '477-28.csse.rose-hulman.edu'
		user = System.getenv('SSH_DEPLOY_USER')
		password = System.getenv('SSH_DEPLOY_PASSWORD')
	}
}
task publishToWebServer(dependsOn: distZip) << {
	ssh.run {
		session(remotes.stagingServer) {
			println "Checking if remote /tmp/EAGM exists ..."
			def result = execute('if test -d /tmp/EAGM; then echo "exists"; fi')						
			if(result != "exists") {
				println("Remote /tmp/EAGM does not exist, creating a new one...")
				execute('mkdir -p /tmp/EAGM')
				println("Remote /tmp/EAGM created!")
			}
			println "Transfering file from local build/distributions to remote /tmp/EAGM ..."
			put from: "${buildDir}/distributions/*", into: '/tmp/EAGM'
			//println "Files transfer complete now setting up the web server ..."

			println "Transfering file from local src/scripts to remote tmp/EAGM ..."
			put from: "${projectDir}/src/scripts/daemon.sh", into: '/tmp/EAGM'
			println "Files transfer complete now setting up web server ..."
			
			println "Checking if remote /var/www/html/EAGM exists ..."
			result = execute('if test -d /var/www/html/EAGM; then echo "exists"; fi')
			if(result != "exists") {
				println("Remote /var/www/html/EAGM does not exist, creating a new one...")
				executeSudo('mkdir -p /var/www/html/EAGM', pty: true, timeoutSec: 10)
				println("Remote /var/www/html/EAGM created!")
			}
			println "Copying data from the temp folder to the web folder ..."
			executeSudo('cp /tmp/EAGM/* /var/www/html/EAGM', pty: true, timeoutSec: 10)
			
			println "Checking if remote ~/EAGM/Scripts exists ..."
			result = execute('if test -d ~/EAGM/Scripts; then echo "exists"; fi')
			if(result != "exists") {
				println("Remote ~/EAGM does not exist, creating a new one...")
				executeSudo('mkdir -p ~/EAGM/Scripts', pty: true, timeoutSec: 10)
				println("Remote ~/EAGM created!")
			}
			println "Copying data from the temp folder to the web folder ..."
			executeSudo('cp /tmp/EAGM/daemon.sh ~/EAGM/Scripts', pty: true, timeoutSec: 10)
			executeSudo('sed -e \'s/CI_BUILD_TAG/'+System.getenv('CI_BUILD_TAG')+'/g\' /home/csse/EAGM/Scripts/daemon.sh', pty: true, timeoutSec: 10)
			
			println "unzipping file contents to correct folder"
			execute('unzip /tmp/EAGM/EAGM-'+System.getenv('CI_BUILD_TAG')+'.zip -d ~/EAGM/', timeoutSec: 30)
			println "restarting daemon service"
			executeSudo('~/EAGM/Scripts/daemon.sh restart', pty: true, timeoutSec: 10)
			
			println "Done! Clearing the tmp folder ..."
			execute('rm -rf /tmp/EAGM')
			println "All done!" 
			println "EAGM has been staged to http://477-27.csse.rose-hulman.edu/EAGM/"
		}
		
/*		session(remotes.deployServer){
			println "Checking if remote /tmp/EAGM exists ..."
			def result = execute('if test -d /tmp/EAGM; then echo "exists"; fi')						
			if(result != "exists") {
				println("Remote /tmp/EAGM does not exist, creating a new one...")
				execute('mkdir -p /tmp/EAGM')
				println("Remote /tmp/EAGM created!")
			}
			println "Transfering file from local build/distributions to remote /tmp/EAGM ..."
			put from: "${buildDir}/distributions/*", into: '/tmp/EAGM'
			//println "Files transfer complete now setting up the web server ..."

			println "Transfering file from local src/scripts to remote tmp/EAGM ..."
			put from: "${projectDir}/src/scripts/daemon.sh", into: '/tmp/EAGM'
			println "Files transfer complete now setting up web server ..."
			
			println "Checking if remote /var/www/html/EAGM exists ..."
			result = execute('if test -d /var/www/html/EAGM; then echo "exists"; fi')
			if(result != "exists") {
				println("Remote /var/www/html/EAGM does not exist, creating a new one...")
				executeSudo('mkdir -p /var/www/html/EAGM', pty: true)
				println("Remote /var/www/html/EAGM created!")
			}
			println "Copying data from the temp folder to the web folder ..."
			executeSudo('cp /tmp/EAGM/* /var/www/html/EAGM', pty: true)
			
			println "Checking if remote ~/EAGM/Scripts exists ..."
			result = execute('if test -d ~/EAGM/Scripts; then echo "exists"; fi')
			if(result != "exists") {
				println("Remote ~/EAGM does not exist, creating a new one...")
				executeSudo('mkdir -p ~/EAGM/Scripts', pty: true)
				println("Remote ~/EAGM created!")
			}
			println "Copying data from the temp folder to the web folder ..."
			executeSudo('cp /tmp/EAGM/daemon.sh ~/EAGM/Scripts', pty: true)
			
			println "unzipping file contents to correct folder"
			executeSudo('unzip /tmp/EAGM/EAGM-1.0.31.zip -d ~/EAGM/')
			//println "restarting daemon service"
			//executeSudo('./~/EAGM/Scripts/daemon.sh restart')
			
			println "Done! Clearing the tmp folder ..."
			execute('rm -rf /tmp/EAGM')
			println "All done!" 
			println "EAGM has been deployed to http://477-28.csse.rose-hulman.edu/EAGM/"
		}*/
	}
}